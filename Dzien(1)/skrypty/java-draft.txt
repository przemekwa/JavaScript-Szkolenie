#1. Zasiêg zmiennych

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
}

var p1 = new Person("Przemek");
console.log(p1.name);
console.log(p1.getPesel());

#2 Proptotype

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    console.log("Hello " + this.name);
  }
}

Person.prototype.getPesel = function (){
  return "Jo³";
}


var p1 = new Person("Przemek");

console.log(p1.name);

##3. Wywolanie asnynchroniczne

var name = "Dawid";

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    setTimeout(function() {
    console.log("Hello " + this.name);  
    }, 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();

Sposób na this jest that;

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    var that = this;
    setTimeout(function() {
    console.log("Hello " + that.name);  
    }, 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();

##Kolejny sposob na this;


function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    
    setTimeout(function(p) {
    console.log("Hello " + this.name);
      console.log(p);
    }.bind(this, 'parametr'), 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();



##4. Use strict

'use strict';

a = 10; // bedzie error

console.log(a);



