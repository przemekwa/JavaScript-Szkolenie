#1. Zasiêg zmiennych

function Person(name)
{
  var pesel  = "000000";
  this.name = name;
  this.getPesel = function() {
    return pesel;
  }
}

var p1 = new Person("Przemek");
console.log(p1.name);
console.log(p1.getPesel());

#2 Proptotype

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    console.log("Hello " + this.name);
  }
}

Person.prototype.getPesel = function (){
  return "Jo³";
}


var p1 = new Person("Przemek");

console.log(p1.name);

##3. Wywolanie asnynchroniczne

var name = "Dawid";

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    setTimeout(function() {
    console.log("Hello " + this.name);  
    }, 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();

Sposób na this jest that;

function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    var that = this;
    setTimeout(function() {
    console.log("Hello " + that.name);  
    }, 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();

##Kolejny sposob na this;


function Person(name)
{
  var pesel  = "000000";
  
  
  this.name = name;
  
  this.getPesel = function() {
    return pesel;
  }
  
  this.greet = function () {
    
    setTimeout(function(p) {
    console.log("Hello " + this.name);
      console.log(p);
    }.bind(this, 'parametr'), 2000);
    
    
  }
}


var p1 = new Person("Przemek");

p1.greet();



##4. Use strict

'use strict';

a = 10; // bedzie error

console.log(a);

#5. Mapy (LINQu)


var a = [1,2,3,4,5,6,8,9];

var a1 = [];

for (var i=0;i<a.lenght;i++)  {
    a1.push(a[i] * 10);
  }

var a2 = a.map(function(item) {
  return item*10;
}); 

console.log(a2);


#6. Every (ka¿dy element)

var a = [1,2,3,4,5,6,8,9];

var ok = a.every(function(item) {
  return item < 10;
});



console.log(ok);

#7. Some (chocia¿ jeden element)

var a = [1,2,3,4,5,6,8,9];

var ok = a.some(function(item) {
  return item === 14;
});

console.log(ok);

#8. forEach (rzadko, efekty uboczne)

var a = [1,2,3,4,5,6,8,9];

var ok = a.forEach(function (item)
                  {
  console.log(item + "ok");
})

console.log(ok);

#9. Filter (where z c#)

var a = [1,2,3,4,5,6,8,9];

var ok = a.filter(function(item) {
  return  item % 2 === 0;
});

console.log(ok);


#10. Reduce (akumulator)

var a = [1,2,3,4,5,6,8,9];

var total = a.reduce(function(acc, item) {
  return acc + item;
}, 0);

console.log(total);
